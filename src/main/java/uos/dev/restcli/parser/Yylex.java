// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package uos.dev.restcli.parser;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int S_REQUEST_SEPARATOR = 2;
  public static final int S_REQUEST_LINE = 4;
  public static final int S_HEADER = 6;
  public static final int S_BODY = 8;
  public static final int S_MULTILE_PART = 10;
  public static final int S_SCRIPT_HANDLER = 12;
  public static final int S_RESPONSE_REFERENCE = 14;
  public static final int S_MULTIPLE_PART_HEADER = 16;
  public static final int S_MULTIPLE_PART_BODY = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\2\0\1\4\1\0\1\5\7\0\1\6\1\7\1\10"+
    "\12\11\1\12\1\0\1\13\1\14\1\15\1\0\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\20\1\24\1\25"+
    "\1\26\2\20\1\27\1\20\1\30\1\31\1\32\1\20"+
    "\1\33\1\34\1\35\1\36\5\20\4\0\1\20\1\0"+
    "\1\37\1\20\1\40\1\41\1\42\1\20\1\43\1\20"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\20"+
    "\1\53\1\54\1\55\1\56\5\20\1\57\1\60\1\61"+
    "\u0482\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\1\1\3\2\4\2\3\1\5"+
    "\1\6\1\7\10\5\1\10\3\11\3\10\2\12\1\13"+
    "\4\12\1\13\5\12\3\14\3\15\1\16\2\17\2\16"+
    "\7\14\14\0\1\20\1\0\1\20\1\0\11\5\1\0"+
    "\1\21\3\0\1\21\1\20\1\0\2\22\14\0\1\23"+
    "\15\0\10\5\1\0\2\24\2\25\1\0\1\26\1\0"+
    "\1\26\2\27\2\30\1\0\1\31\1\0\1\31\3\0"+
    "\1\32\1\0\1\32\7\0\2\33\3\0\1\33\2\5"+
    "\1\34\3\5\1\21\1\33\1\0\2\35\1\23\1\33"+
    "\11\0\2\5\1\31\1\0\1\31\6\0\1\5\2\0"+
    "\1\36\7\0\1\36\13\0\1\37\1\0\2\40\1\0"+
    "\2\41\17\0\2\42\3\0\2\43\5\0\2\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u0258"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u0258\0\u041a"+
    "\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\u0258\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0708\0\u0258\0\u0834"+
    "\0\u0866\0\u0384\0\u0898\0\u0258\0\u02bc\0\u08ca\0\u0258\0\u02bc"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u06d6\0\u0708\0\u073a"+
    "\0\u076c\0\u09f6\0\u079e\0\u07d0\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0226\0\u0bb8\0\u0bea\0\u0384"+
    "\0\u0c1c\0\u0258\0\u0c4e\0\u0bea\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u05aa\0\u0258"+
    "\0\u0e74\0\u06a4\0\u0ea6\0\u0bea\0\u0e74\0\u06d6\0\u0258\0\u06d6"+
    "\0\u0708\0\u073a\0\u079e\0\u0ed8\0\u0f0a\0\u0f3c\0\u0834\0\u0f6e"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u092e\0\u0258\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u0258\0\u0ed8\0\u0258\0\u0f0a\0\u1482"+
    "\0\u0258\0\u14b4\0\u1482\0\u0258\0\u0f6e\0\u0258\0\u0fa0\0\u14e6"+
    "\0\u0258\0\u1518\0\u14e6\0\u154a\0\u157c\0\u15ae\0\u0258\0\u15e0"+
    "\0\u15ae\0\u1612\0\u1644\0\u0258\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u0258\0\u122a\0\u173e\0\u1770\0\u17a2\0\u12c0\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\u189c\0\u18ce\0\u122a\0\u1450\0\u1900\0\u0258"+
    "\0\u154a\0\u122a\0\u157c\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa"+
    "\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1900\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1b58\0\u1d1a\0\u14e6\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u0258\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u1fa4\0\u20d0"+
    "\0\u0258\0\u0bea\0\u2102\0\u0258\0\u0bea\0\u2134\0\u2166\0\u2198"+
    "\0\u21ca\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328"+
    "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u0258\0\u0bea\0\u2422\0\u2454"+
    "\0\u2486\0\u0258\0\u0bea\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u0258\0\u0bea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\3\16\1\17\53\15\1\16\1\15\1\20\1\21"+
    "\2\22\1\23\3\20\1\24\47\20\1\22\1\20\1\25"+
    "\1\26\1\27\1\25\1\30\14\25\1\31\1\32\1\25"+
    "\1\33\1\34\3\25\1\35\1\36\2\25\1\37\24\25"+
    "\1\40\1\41\1\42\1\43\1\44\3\40\1\45\1\40"+
    "\1\46\45\40\1\43\1\40\1\47\1\50\1\51\1\47"+
    "\1\52\3\47\1\53\2\47\1\54\1\47\1\55\42\47"+
    "\1\56\1\47\1\57\1\60\2\57\1\52\1\57\1\61"+
    "\1\57\1\62\2\57\1\63\46\57\4\64\1\65\10\64"+
    "\1\66\44\64\4\67\1\70\6\67\1\71\46\67\1\72"+
    "\1\73\1\74\1\73\1\75\5\72\1\76\45\72\1\73"+
    "\1\72\1\77\1\100\1\51\1\77\1\101\1\77\1\102"+
    "\1\77\1\103\2\77\1\104\1\77\1\105\42\77\1\56"+
    "\1\77\21\0\1\106\1\107\1\0\1\110\1\111\3\0"+
    "\1\112\1\113\2\0\1\114\25\0\1\115\143\0\3\16"+
    "\54\0\1\16\5\0\1\116\56\0\1\21\2\22\1\117"+
    "\3\0\1\120\47\0\1\22\2\0\3\22\54\0\1\22"+
    "\1\0\1\117\1\121\1\122\1\117\1\123\53\117\1\124"+
    "\1\117\10\0\1\117\51\0\1\25\2\0\57\25\1\0"+
    "\1\26\23\0\1\125\34\0\1\25\2\0\1\25\1\126"+
    "\56\25\2\0\26\25\1\127\31\25\2\0\20\25\1\130"+
    "\37\25\2\0\20\25\1\131\37\25\2\0\20\25\1\132"+
    "\37\25\2\0\27\25\1\133\30\25\2\0\14\25\1\134"+
    "\11\25\1\135\4\25\1\131\24\25\2\0\30\25\1\136"+
    "\26\25\2\137\1\0\7\137\1\140\50\137\1\41\1\42"+
    "\1\43\1\141\3\137\1\142\1\137\1\140\45\137\1\43"+
    "\1\137\1\0\3\42\54\0\1\42\1\0\1\137\1\43"+
    "\1\42\1\43\6\137\1\140\45\137\1\43\1\137\2\141"+
    "\1\122\1\141\1\143\5\141\1\144\45\141\1\145\1\141"+
    "\2\137\1\0\5\137\1\141\1\137\1\140\47\137\2\146"+
    "\1\147\55\146\1\150\1\146\2\151\1\51\55\151\1\56"+
    "\2\151\1\152\1\51\1\151\1\117\3\151\1\153\47\151"+
    "\1\56\1\151\2\117\1\122\1\117\1\123\53\117\1\124"+
    "\1\117\2\151\1\51\5\151\1\117\47\151\1\56\2\151"+
    "\1\154\1\51\12\151\1\155\42\151\1\56\2\151\1\156"+
    "\1\51\55\151\1\56\1\151\1\0\1\157\2\0\1\117"+
    "\3\0\1\120\57\0\1\160\70\0\1\161\45\0\1\162"+
    "\75\0\1\163\44\0\2\164\1\0\7\164\1\165\50\164"+
    "\1\73\1\74\1\73\6\164\1\165\45\164\1\73\1\164"+
    "\1\0\3\74\54\0\1\74\1\0\2\164\1\0\1\164"+
    "\1\166\5\164\1\165\47\164\2\151\1\51\3\151\1\160"+
    "\51\151\1\56\2\151\1\167\1\51\55\151\1\56\1\151"+
    "\31\0\1\170\53\0\1\171\61\0\1\172\61\0\1\173"+
    "\70\0\1\174\46\0\1\175\11\0\1\176\4\0\1\172"+
    "\56\0\1\177\32\0\1\200\55\0\2\117\1\122\55\117"+
    "\1\124\2\117\1\121\1\122\13\117\1\201\41\117\1\124"+
    "\3\117\1\122\1\117\1\200\53\117\1\124\1\117\35\0"+
    "\1\202\24\0\1\25\2\0\1\25\1\203\56\25\2\0"+
    "\25\25\1\204\32\25\2\0\24\25\1\205\33\25\2\0"+
    "\32\25\1\206\25\25\2\0\14\25\1\207\43\25\2\0"+
    "\32\25\1\210\25\25\2\0\32\25\1\211\25\25\2\0"+
    "\31\25\1\131\26\25\2\0\14\25\1\212\42\25\2\141"+
    "\1\122\7\141\1\144\45\141\1\145\3\141\1\122\1\141"+
    "\1\213\5\141\1\144\45\141\1\145\1\141\2\154\1\214"+
    "\55\154\1\215\1\154\2\155\1\216\55\155\1\217\1\155"+
    "\1\220\1\156\1\221\54\220\1\222\1\223\1\220\2\160"+
    "\1\224\55\160\1\225\1\160\2\161\1\226\55\161\1\227"+
    "\1\161\1\230\1\162\1\231\54\230\1\232\1\233\1\230"+
    "\1\0\1\234\60\0\2\164\1\0\1\164\1\235\5\164"+
    "\1\165\47\164\1\236\1\167\1\237\54\236\1\240\1\241"+
    "\1\236\30\0\1\242\60\0\1\243\67\0\1\244\43\0"+
    "\1\245\77\0\1\246\61\0\1\247\60\0\1\172\44\0"+
    "\1\250\42\0\2\200\1\251\55\200\1\252\1\200\2\117"+
    "\1\122\46\117\1\253\4\117\1\254\1\117\1\124\1\117"+
    "\35\0\1\255\24\0\1\203\1\200\1\251\55\203\1\256"+
    "\1\203\1\25\2\0\25\25\1\257\32\25\2\0\20\25"+
    "\1\260\37\25\1\261\1\0\60\25\2\0\17\25\1\206"+
    "\40\25\2\0\23\25\1\262\34\25\2\0\16\25\1\263"+
    "\41\25\2\0\16\25\1\264\40\25\2\213\1\251\7\213"+
    "\1\265\45\213\1\266\1\213\2\220\1\221\55\220\1\223"+
    "\3\220\1\221\2\220\1\223\52\220\1\223\1\220\2\230"+
    "\1\231\55\230\1\233\3\230\1\231\2\230\1\267\52\230"+
    "\1\233\1\230\2\234\1\270\55\234\1\271\1\234\2\235"+
    "\1\251\7\235\1\272\45\235\1\273\1\235\2\236\1\237"+
    "\55\236\1\241\3\236\1\237\2\236\1\241\52\236\1\241"+
    "\1\236\30\0\1\274\54\0\1\275\60\0\1\244\65\0"+
    "\1\276\54\0\1\277\61\0\1\300\40\0\2\117\1\122"+
    "\34\117\1\301\12\117\1\302\5\117\1\124\3\117\1\122"+
    "\51\117\1\303\3\117\1\124\1\117\32\0\1\304\27\0"+
    "\1\25\2\0\20\25\1\305\37\25\2\0\32\25\1\264"+
    "\24\25\1\0\1\261\60\0\1\25\2\0\26\25\1\306"+
    "\31\25\2\0\22\25\1\206\35\25\2\0\20\25\1\206"+
    "\36\25\2\267\1\307\2\267\1\310\52\267\1\311\1\267"+
    "\23\0\1\312\73\0\1\300\55\0\1\313\55\0\1\244"+
    "\57\0\1\244\36\0\2\117\1\122\45\117\1\314\7\117"+
    "\1\124\3\117\1\122\3\117\1\315\51\117\1\124\3\117"+
    "\1\122\37\117\1\316\15\117\1\124\1\117\10\0\1\317"+
    "\51\0\1\25\2\0\16\25\1\131\41\25\2\0\25\25"+
    "\1\320\31\25\5\321\1\322\54\321\2\267\1\307\2\267"+
    "\1\310\52\267\1\311\1\323\21\0\1\172\70\0\1\324"+
    "\31\0\2\117\1\122\37\117\1\325\15\117\1\124\3\117"+
    "\1\122\35\117\1\326\6\117\1\327\3\117\1\330\4\117"+
    "\1\124\3\117\1\122\3\117\1\331\51\117\1\124\1\117"+
    "\11\0\1\332\50\0\1\25\2\0\31\25\1\206\25\25"+
    "\5\321\1\322\53\321\1\333\34\0\1\244\25\0\2\117"+
    "\1\122\11\117\1\334\43\117\1\124\3\117\1\122\47\117"+
    "\1\335\5\117\1\124\3\117\1\122\47\117\1\336\5\117"+
    "\1\124\3\117\1\122\37\117\1\337\15\117\1\124\3\117"+
    "\1\122\47\117\1\340\5\117\1\124\1\117\7\0\1\341"+
    "\1\0\1\332\50\0\2\117\1\122\14\117\40\342\1\117"+
    "\1\124\3\117\1\122\47\117\1\343\5\117\1\124\3\117"+
    "\1\122\40\117\1\344\14\117\1\124\3\117\1\122\36\117"+
    "\1\345\16\117\1\124\3\117\1\122\51\117\1\346\3\117"+
    "\1\124\1\117\11\0\1\347\50\0\1\117\1\350\1\351"+
    "\3\117\1\342\2\117\1\342\5\117\40\342\1\117\1\352"+
    "\3\117\1\122\43\117\1\353\11\117\1\124\2\117\1\344"+
    "\1\354\55\117\1\355\3\117\1\122\41\117\1\356\13\117"+
    "\1\124\3\117\1\122\3\117\1\357\51\117\1\124\2\117"+
    "\1\350\1\351\55\117\1\352\3\117\1\122\41\117\1\360"+
    "\13\117\1\124\3\117\1\122\50\117\1\361\4\117\1\124"+
    "\3\117\1\122\35\117\1\362\17\117\1\124\3\117\1\122"+
    "\37\117\1\363\15\117\1\124\3\117\1\122\37\117\1\364"+
    "\15\117\1\124\3\117\1\122\50\117\1\365\4\117\1\124"+
    "\3\117\1\122\3\117\1\366\51\117\1\124\3\117\1\122"+
    "\35\117\1\367\17\117\1\124\3\117\1\122\37\117\1\370"+
    "\15\117\1\124\3\117\1\122\42\117\1\371\12\117\1\124"+
    "\3\117\1\122\52\117\1\372\2\117\1\124\3\117\1\122"+
    "\36\117\1\373\16\117\1\124\3\117\1\122\34\117\1\374"+
    "\20\117\1\124\2\117\1\372\1\375\55\117\1\376\3\117"+
    "\1\122\37\117\1\377\15\117\1\124\3\117\1\122\50\117"+
    "\1\u0100\4\117\1\124\3\117\1\122\46\117\1\u0101\6\117"+
    "\1\124\2\117\1\u0100\1\u0102\55\117\1\u0103\3\117\1\122"+
    "\52\117\1\u0104\2\117\1\124\3\117\1\122\41\117\1\u0105"+
    "\13\117\1\124\3\117\1\122\34\117\1\u0106\20\117\1\124"+
    "\3\117\1\122\44\117\1\u0107\10\117\1\124\3\117\1\122"+
    "\51\117\1\u0108\3\117\1\124\2\117\1\u0108\1\u0109\55\117"+
    "\1\u010a\1\117";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9650];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\2\1\1\11\6\1\1\11\21\1\1\11"+
    "\5\1\1\11\4\1\1\11\2\1\1\11\16\1\7\0"+
    "\1\1\4\0\1\11\1\0\1\1\1\0\11\1\1\0"+
    "\1\11\3\0\2\1\1\0\1\11\1\1\14\0\1\11"+
    "\15\0\10\1\1\0\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\0\1\1\3\0\1\11\1\0\1\1\2\0"+
    "\1\11\4\0\1\11\1\1\3\0\11\1\1\0\1\11"+
    "\3\1\11\0\3\1\1\0\1\1\6\0\1\1\2\0"+
    "\1\1\7\0\1\11\13\0\1\1\1\0\1\11\1\1"+
    "\1\0\1\11\1\1\17\0\1\11\1\1\3\0\1\11"+
    "\1\1\5\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[266];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private static final boolean DEBUG = false;
private boolean hasRequestTarget = false;
private boolean isMultiplePart = false;
private int previousState = -1;
private String currentFieldName = null;
private boolean isNewPartRequired = false;

public int getPreviousState() {
  return previousState;
}

private void switchState(int newState) {
  previousState = yystate();
  yybegin(newState);
}

private void reset() {
    hasRequestTarget = false;
    isMultiplePart = false;
    currentFieldName = null;
    isNewPartRequired = false;
}

public boolean isMultiplePart() {
    return isMultiplePart;
}

public boolean isNewPartRequired() {
    return isNewPartRequired;
}

public void resetNewPartRequired() {
    isNewPartRequired = false;
}

private void throwError() throws ParserException {
    throw new ParserException("Error while parsing: " + yytext());
}

private Yytoken createTokenWithoutValue(TokenType type) {
  return new Yytoken(type);
}

private Yytoken createTokenNormal(TokenType type) {
  return new Yytoken(type, yytext());
}

private Yytoken createTokenTrimmed(TokenType type) {
  return new Yytoken(type, yytext().trim());
}

private Yytoken createTokenRequestName() {
  String text = yytext();
  String nameField = "@name=";
  int index = text.indexOf(nameField);
  if (index < 0) {
    throwError();
  }
  int start = index + nameField.length();
  String requestName = text.substring(start).trim();
  return new Yytoken(TokenType.TYPE_REQUEST_NAME, requestName);
}

private Yytoken createTokenMessageLineFile() {
  if (yytext().charAt(0) != '<') {
    throwError();
  }
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_BODY_FILE_REF, filePath);
}

private Yytoken createTokenHandlerFileScript() {
  if (yytext().charAt(0) != '>') {
    throwError();
  }
  String filePath = yytext().trim().substring(1).trim();
  return new Yytoken(TokenType.TYPE_HANDLER_FILE_SCRIPT, filePath, yyline);
}

private Yytoken createAndSaveFieldNameToken(TokenType type) {
  String fieldName = yytext().trim();
  currentFieldName = fieldName;
  return new Yytoken(type, fieldName);
}

private Yytoken createTokenEmbeddedScriptHandler() {
  String text = yytext();
  String openScript = "{%";
  String closeScript = "%" + "}";
  int start = text.indexOf(openScript) + openScript.length();
  int end = text.lastIndexOf(closeScript);
  String script = text.substring(start, end).trim();
  return new Yytoken(TokenType.TYPE_HANDLER_EMBEDDED_SCRIPT, script, yyline);
}

private Yytoken createFieldValueToken() {
  String fieldValueWithColonPrefix = yytext().trim();
  String fieldValue = fieldValueWithColonPrefix.replaceFirst(": *", "");
  boolean isContentTypeHeader = "Content-Type".equalsIgnoreCase(currentFieldName);
  if (isContentTypeHeader && yystate() == S_HEADER) {
    isMultiplePart = fieldValue.toLowerCase().contains("multipart/form-data;");
  }
  return new Yytoken(TokenType.TYPE_FIELD_VALUE, fieldValue);
}

private static final void T(String text) {
  if (DEBUG) {
    System.out.println(text);
  }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Yytoken yylex() throws java.io.IOException, ParserException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { T("In YYINITIAL but got " + yytext() + " switch to S_REQUEST_LINE");
                                             yypushback(yylength());
                                             switchState(S_REQUEST_LINE);
            }
            // fall through
          case 37: break;
          case 2:
            { T("Ignore any space in YYINITIAL");
            }
            // fall through
          case 38: break;
          case 3:
            { yypushback(yylength()); switchState(S_REQUEST_LINE);
            }
            // fall through
          case 39: break;
          case 4:
            { T("Ignore any space in S_REQUEST_SEPARATOR");
            }
            // fall through
          case 40: break;
          case 5:
            { hasRequestTarget = true; return createTokenTrimmed(TokenType.TYPE_REQUEST_TARGET);
            }
            // fall through
          case 41: break;
          case 6:
            { T("Ignore {WhiteSpace}+ in S_REQUEST_LINE");
            }
            // fall through
          case 42: break;
          case 7:
            { if (!hasRequestTarget) throwError(); switchState(S_HEADER);
            }
            // fall through
          case 43: break;
          case 8:
            { T("State S_HEADER fallback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            }
            // fall through
          case 44: break;
          case 9:
            { if (isMultiplePart) switchState(S_MULTILE_PART); else switchState(S_BODY);
            }
            // fall through
          case 45: break;
          case 10:
            { T("State S_BODY falback for: " + yytext());
                                             yypushback(yylength());
                                             switchState(YYINITIAL);
            }
            // fall through
          case 46: break;
          case 11:
            { return createTokenNormal(TokenType.TYPE_BODY_MESSAGE);
            }
            // fall through
          case 47: break;
          case 12:
            { yypushback(yylength()); switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 48: break;
          case 13:
            { T("In S_RESPONSE_REFERENCE but got " + yytext() + " -> switch to YYINITIAL"); yypushback(yylength()); switchState(YYINITIAL);
            }
            // fall through
          case 49: break;
          case 14:
            { throwError();
            }
            // fall through
          case 50: break;
          case 15:
            { switchState(S_MULTIPLE_PART_BODY);
            }
            // fall through
          case 51: break;
          case 16:
            { return createTokenNormal(TokenType.TYPE_COMMENT);
            }
            // fall through
          case 52: break;
          case 17:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return createAndSaveFieldNameToken(TokenType.TYPE_FIELD_NAME);
            }
            // fall through
          case 53: break;
          case 18:
            { return createFieldValueToken();
            }
            // fall through
          case 54: break;
          case 19:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return createTokenTrimmed(TokenType.TYPE_FIELD_NAME);
            }
            // fall through
          case 55: break;
          case 20:
            { return createTokenMessageLineFile();
            }
            // fall through
          case 56: break;
          case 21:
            { T("State S_BODY but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            }
            // fall through
          case 57: break;
          case 22:
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                             yypushback(yylength());
                                             switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 58: break;
          case 23:
            { isNewPartRequired = true; switchState(S_MULTIPLE_PART_HEADER);
            }
            // fall through
          case 59: break;
          case 24:
            { T("State S_BODY_MULTILE_PART but got <>.* => fallback to response reference");
                                             yypushback(yylength());
                                             switchState(S_RESPONSE_REFERENCE);
            }
            // fall through
          case 60: break;
          case 25:
            { switchState(S_RESPONSE_REFERENCE);
                                             return createTokenHandlerFileScript();
            }
            // fall through
          case 61: break;
          case 26:
            { T("State S_BODY but got response handler -> switch state to S_SCRIPT_HANDLER");
                                               yypushback(yylength());
                                               switchState(S_SCRIPT_HANDLER);
            }
            // fall through
          case 62: break;
          case 27:
            { reset();
                                             switchState(S_REQUEST_SEPARATOR);
                                             return createTokenTrimmed(TokenType.TYPE_SEPARATOR);
            }
            // fall through
          case 63: break;
          case 28:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 10;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) {
                zzFin = new boolean[zzBufferL.length+1];
              }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 11;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_METHOD);
            }
            // fall through
          case 64: break;
          case 29:
            { return createTokenNormal(TokenType.TYPE_RESPONSE_REFERENCE);
            }
            // fall through
          case 65: break;
          case 30:
            { switchState(S_RESPONSE_REFERENCE);
                                             return createTokenEmbeddedScriptHandler();
            }
            // fall through
          case 66: break;
          case 31:
            { return createTokenTrimmed(TokenType.TYPE_REQUEST_HTTP_VERSION);
            }
            // fall through
          case 67: break;
          case 32:
            { return createTokenRequestName();
            }
            // fall through
          case 68: break;
          case 33:
            { return createTokenWithoutValue(TokenType.TYPE_NO_LOG);
            }
            // fall through
          case 69: break;
          case 34:
            { return createTokenWithoutValue(TokenType.TYPE_NO_REDIRECT);
            }
            // fall through
          case 70: break;
          case 35:
            { return createTokenWithoutValue(TokenType.TYPE_NO_COOKIE_JAR);
            }
            // fall through
          case 71: break;
          case 36:
            { return createTokenWithoutValue(TokenType.TYPE_USE_OS_CREDENTIALS);
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
